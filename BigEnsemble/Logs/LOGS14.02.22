14.02.22
No commercial bullshit day today, I have projects to work on. 
I need to figure out how to get my WETH with the code that I have.
I've followed two different ways of doing to try to get to that first step, the Aave
white paper on flashloans V2 (wanted to do V3 but the steps haven't been layed out yet,
had to follow V2), and the Aave flashloan tutuorial made by Patrick Collins.
I've written a script to exchange my ETH to WETH through the Kovan test network, which
I do have configured and I have some ETH and already have the WETH token registered. I
have entered my wallet ID and private key to have access to my testnet funds, but
the transaction does not go through.


15.02.22
Working on fixing the compiling errors

The more I'm trying to understand this issue, the more I learn about Aave and Solidity 
and see how many small pieces of knowledge I'm missing to understand the intricacies of 
the system... I need to learn more on how functions calls are made, why do they use some 
parameters and sometimes not when using another contract as a template? It's a bit 
confusing to me still

I am going to grab contract examples available online and find out patterns, repetitions of
code 

16.02.22

I've re-done one of the contracts I had, which is a lightly extended version of the 
base contract explained on the Aave documents on Setting Up part  

If I understand correctly, the executeOperation() is the code that our
contract(the contract in any kind of example) has to communicate with 
the Aave Lending Pool, it is marked as external, override and returns a boolean value
meaning this function will be the one to let us know whether we 1)received the 
flashloan amount 2)our buy/sell logic succeeded 3) we repaid the amount correctly. 
=> true value for succeed won't happen if the external contract calling this function 
reverts the transaction 

 Then the flashLoanCall(), which is marked as public, is the one that anyone
 calling our contract to request a flashloan will actually be using.
 For example, I'm the user of a flashloan bot, I will be entering the inputs corresponding
 to the parameters in flashLoanCall(), being receiverAddress, assets, amounts, mode etc. 

 all in all it makes sense.
 
 it's about using the smart contract to do as little as efficient as possible 
 our smart contract's goal is to :
    - receive the inputs of the loaner
    - communicate those inputs and connecting wallets to Aave
the smart contract is the proof that we had funds to make a specific transaction happen 
and the transparency of the logic used. 

------ NOw what I need to find out is where do I write the logic.
I mean, I know where physically to write it, but it's gonna be quite a lot of code
so I need to do as much as I can on scripts, on python or JS and integrate those results to this smart contract.

====>>> I need to find examples of logic input into smart contracts
--- after researching logic for about an hour, I realise that I should first complete
my flashloan code and figure out which kind of logic I want to implement after that,
it will give me the pieces necessary to know what to look for. 
